services:

  # FastAPI
  fastapi:
    build:
      context: ../
      dockerfile: docker/minirag/Dockerfile
      
      args:
        - APP_NAME=${APP_NAME}
        - APP_VERSION=${APP_VERSION}
        - POSTGRES_HOST=${POSTGRES_HOST}
        - POSTGRES_PORT=${POSTGRES_PORT}
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        - POSTGRES_MAIN_DATABASE=${POSTGRES_MAIN_DATABASE}
        - MONGODB_URL=${MONGODB_URL}
        - MONGODB_DATABASE=${MONGODB_DATABASE}
        - GENERATION_BACKEND=${GENERATION_BACKEND}
        - EMBEDDING_BACKEND=${EMBEDDING_BACKEND}
        - OPENAI_API_KEY=${OPENAI_API_KEY}
        - OPENAI_API_URL=${OPENAI_API_URL}
        - COHERE_API_KEY=${COHERE_API_KEY}

    container_name: fastapi
    volumes:
      - fastapi_data:/app/assets
    ports:
      - "8000:8000"
    networks:
      - backend
    restart: always
    depends_on:
      pgvector:
        condition: service_healthy
    
    env_file:
      - ./env/.env.app

  # nginx
  nginx:
    image: nginx:stable-alpine3.20-perl 
    container_name: nginx
    ports:
      - "80:80"
    depends_on:
      - fastapi
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      - backend
    restart: always

  #  Postgresql (PGVector)
  pgvector:
    image: pgvector/pgvector:0.8.0-pg17
    container_name: pgvector
    ports:
      - "5400:5432"
    volumes:
      - pgvector_data:/var/lib/postgresql/data
    env_file:
      - ./env/.env.postgres
    networks:
      - backend
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Postgres exporter
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.17.1
    container_name: postgres-exporter
    ports:
      - "9187:9187"
    env_file:
      - ./env/.env.postgres-exporter
    networks:
      - backend
    depends_on:
      - pgvector
    restart: always


  # Qdrant
  qdrant:
    image: qdrant/qdrant:v1.13.6
    container_name: qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - backend
    restart: always

  # prometheus
  prometheus:
    image: prom/prometheus:v3.3.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - backend
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.enable-lifecycle
      - --web.console.templates=/etc/prometheus/consoles
      - --web.console.libraries=/etc/prometheus/console_libraries
    restart: always

  # grafana
  grafana:
    image: grafana/grafana:11.6.0-ubuntu
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    env_file:
      - ./env/.env.grafana
    restart: always
    networks:
      backend:

  # node-exporter
  node-exporter:
    image: prom/node-exporter:v1.9.1
    container_name: node-exporter
    ports:
      - "9100:9100"
    volumes:
      -/proc:/host/proc:ro
      -/sys:/host/sys:ro
      -/:/rootfs:ro

    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: always
    networks:
      - backend


networks:
  backend:
    driver: bridge

volumes:
  fastapi_data:
  pgvector_data:
  qdrant_data:
  prometheus_data:
  grafana_data: